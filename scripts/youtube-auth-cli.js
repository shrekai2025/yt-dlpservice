#!/usr/bin/env node

/**
 * YouTube认证命令行工具
 * 专为Ubuntu服务器环境设计
 */

import { readFileSync, writeFileSync, existsSync, mkdirSync } from 'fs'
import { dirname, join } from 'path'
import { fileURLToPath } from 'url'
import { exec } from 'child_process'
import { promisify } from 'util'
import readline from 'readline'

const execAsync = promisify(exec)
const __dirname = dirname(fileURLToPath(import.meta.url))
const projectRoot = join(__dirname, '..')
const cookieDir = join(projectRoot, 'data', 'cookies')
const cookieFile = join(cookieDir, 'youtube_cookies.txt')

// 创建readline接口
const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout
})

const question = (query) => new Promise((resolve) => rl.question(query, resolve))

// 颜色输出
const colors = {
  red: '\x1b[31m',
  green: '\x1b[32m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  magenta: '\x1b[35m',
  cyan: '\x1b[36m',
  white: '\x1b[37m',
  reset: '\x1b[0m'
}

function colorLog(color, message) {
  console.log(`${colors[color]}${message}${colors.reset}`)
}

// 检查Cookie文件状态
function checkCookieStatus() {
  if (!existsSync(cookieFile)) {
    return { exists: false, message: 'Cookie文件不存在' }
  }

  const stats = require('fs').statSync(cookieFile)
  const now = Date.now()
  const fileAge = now - stats.mtime.getTime()
  const hoursAge = fileAge / (1000 * 60 * 60)
  
  return {
    exists: true,
    age: hoursAge,
    path: cookieFile,
    message: `Cookie文件存在，${hoursAge.toFixed(1)}小时前更新`
  }
}

// 测试yt-dlp与YouTube的连通性
async function testYouTubeConnection(testUrl = 'https://www.youtube.com/watch?v=dQw4w9WgXcQ') {
  colorLog('cyan', '🧪 测试YouTube连通性...')
  
  try {
    // 不使用Cookie测试
    colorLog('blue', '1. 测试无Cookie访问...')
    try {
      const { stdout: noCookieResult } = await execAsync(
        `yt-dlp --no-warnings --dump-json --quiet "${testUrl}" 2>/dev/null | head -1`,
        { timeout: 30000 }
      )
      
      if (noCookieResult.trim()) {
        colorLog('green', '✅ 无Cookie可以访问YouTube')
        return { needsCookie: false, testUrl }
      }
    } catch (error) {
      colorLog('yellow', '⚠️ 无Cookie无法访问YouTube')
    }

    // 使用Cookie测试
    if (existsSync(cookieFile)) {
      colorLog('blue', '2. 测试使用Cookie访问...')
      try {
        const { stdout: cookieResult } = await execAsync(
          `yt-dlp --no-warnings --dump-json --cookies "${cookieFile}" --quiet "${testUrl}" 2>/dev/null | head -1`,
          { timeout: 30000 }
        )
        
        if (cookieResult.trim()) {
          const data = JSON.parse(cookieResult.trim())
          colorLog('green', '✅ 使用Cookie可以访问YouTube')
          colorLog('green', `   标题: ${data.title}`)
          colorLog('green', `   时长: ${data.duration}秒`)
          colorLog('green', `   播放量: ${data.view_count?.toLocaleString() || 'N/A'}`)
          return { needsCookie: true, working: true, testUrl, data }
        }
      } catch (error) {
        colorLog('red', '❌ Cookie无效或已过期')
      }
    }

    return { needsCookie: true, working: false, testUrl }
  } catch (error) {
    colorLog('red', `测试失败: ${error.message}`)
    return { error: error.message }
  }
}

// 手动设置Cookie
async function setCookieManually() {
  colorLog('cyan', '📋 手动设置YouTube Cookie')
  colorLog('white', '请按照以下步骤获取Cookie:')
  console.log(`
1. 在本地浏览器打开 https://www.youtube.com
2. 登录你的Google账号
3. 打开开发者工具 (F12)
4. 转到 Network 标签页
5. 刷新页面，找到任意请求
6. 右键点击请求 -> Copy -> Copy as cURL
7. 从cURL命令中提取Cookie信息

或者使用浏览器扩展导出Cookie为Netscape格式
  `)

  const cookieInput = await question('请粘贴Cookie内容 (可以是浏览器Cookie字符串或Netscape格式): ')
  
  if (!cookieInput.trim()) {
    colorLog('red', '❌ 未输入Cookie内容')
    return false
  }

  try {
    // 确保目录存在
    if (!existsSync(cookieDir)) {
      mkdirSync(cookieDir, { recursive: true })
    }

    let cookieContent = cookieInput.trim()

    // 如果是浏览器Cookie字符串格式，转换为Netscape格式
    if (!cookieContent.includes('# Netscape HTTP Cookie File') && cookieContent.includes('=')) {
      colorLog('blue', '🔄 转换Cookie格式...')
      
      const netscapeLines = [
        '# Netscape HTTP Cookie File',
        '# Generated by yt-dlpservice CLI',
        ''
      ]

      // 解析Cookie字符串
      const cookies = cookieContent.split(';').map(c => c.trim())
      
      for (const cookie of cookies) {
        if (cookie.includes('=')) {
          const [name, value] = cookie.split('=', 2)
          // 简单的Netscape格式行
          netscapeLines.push(`.youtube.com\tTRUE\t/\tTRUE\t${Math.floor(Date.now() / 1000) + 86400}\t${name.trim()}\t${value?.trim() || ''}`)
        }
      }

      cookieContent = netscapeLines.join('\n')
    }

    // 保存Cookie文件
    writeFileSync(cookieFile, cookieContent, 'utf8')
    colorLog('green', `✅ Cookie已保存到: ${cookieFile}`)
    
    // 测试Cookie有效性
    colorLog('cyan', '🧪 测试Cookie有效性...')
    const testResult = await testYouTubeConnection()
    
    if (testResult.working) {
      colorLog('green', '🎉 Cookie设置成功且有效!')
      return true
    } else {
      colorLog('red', '❌ Cookie无效，请检查并重新设置')
      return false
    }
  } catch (error) {
    colorLog('red', `❌ 保存Cookie失败: ${error.message}`)
    return false
  }
}

// 设置环境变量
async function setupEnvironmentVariables() {
  colorLog('cyan', '🔧 设置环境变量')
  
  const email = await question('请输入YouTube/Google邮箱: ')
  const password = await question('请输入密码: ')
  
  if (!email || !password) {
    colorLog('red', '❌ 邮箱和密码不能为空')
    return false
  }

  // 生成环境变量设置脚本
  const envScript = `#!/bin/bash
# YouTube认证环境变量
export YOUTUBE_EMAIL="${email}"
export YOUTUBE_PASSWORD="${password}"

echo "YouTube认证环境变量已设置"
`

  const envFile = join(projectRoot, 'youtube-env.sh')
  writeFileSync(envFile, envScript, 'utf8')
  
  colorLog('green', `✅ 环境变量脚本已生成: ${envFile}`)
  colorLog('yellow', '请运行以下命令设置环境变量:')
  colorLog('white', `source ${envFile}`)
  
  return true
}

// 生成服务器部署指南
function generateServerGuide() {
  colorLog('cyan', '📖 Ubuntu服务器部署指南')
  
  const guide = `
🚀 Ubuntu服务器YouTube认证部署指南

1. 环境准备
   sudo apt update
   sudo apt install python3 python3-pip nodejs npm
   pip3 install yt-dlp

2. 项目部署
   git clone <your-repo>
   cd yt-dlpservice
   npm install
   
3. 设置YouTube认证 (选择一种方法)

   方法A: 环境变量自动登录
   export YOUTUBE_EMAIL="your-email@gmail.com"
   export YOUTUBE_PASSWORD="your-password"
   
   方法B: 手动设置Cookie
   node scripts/youtube-auth-cli.js --set-cookie
   
   方法C: 服务器API设置
   curl -X POST http://localhost:3000/api/youtube/auth \\
     -H "Content-Type: application/json" \\
     -d '{"action":"set-cookies","cookies":"your-cookie-string"}'

4. 启动服务
   npm run build
   npm start
   
5. 验证设置
   node scripts/youtube-auth-cli.js --test
   
6. 监控和维护
   # 检查Cookie状态
   node scripts/youtube-auth-cli.js --status
   
   # 重新设置Cookie
   node scripts/youtube-auth-cli.js --set-cookie

📝 注意事项:
- Cookie通常24小时后过期，需要定期更新
- 建议使用systemd服务管理应用
- 设置日志轮转避免日志文件过大
- 定期备份Cookie文件

🔧 故障排除:
- 如果yt-dlp报错"LOGIN_REQUIRED"，说明需要更新Cookie
- 如果自动登录失败，可能需要在Google账号中开启"低安全性应用"访问
- 某些Google账号可能需要应用专用密码

Cookie文件位置: ${cookieFile}
  `
  
  console.log(guide)
  
  // 保存指南到文件
  const guideFile = join(projectRoot, 'YOUTUBE_SERVER_SETUP.md')
  writeFileSync(guideFile, guide, 'utf8')
  colorLog('green', `📄 指南已保存到: ${guideFile}`)
}

// 主函数
async function main() {
  const args = process.argv.slice(2)
  const command = args[0]

  colorLog('magenta', '🎬 YouTube认证CLI工具')
  colorLog('white', '=' .repeat(50))

  try {
    switch (command) {
      case '--status':
      case '-s':
        const status = checkCookieStatus()
        colorLog('blue', '📊 Cookie状态:')
        console.log(`  ${status.message}`)
        if (status.exists) {
          console.log(`  路径: ${status.path}`)
          console.log(`  年龄: ${status.age.toFixed(1)}小时`)
        }
        break

      case '--test':
      case '-t':
        const testUrl = args[1] || 'https://www.youtube.com/watch?v=dQw4w9WgXcQ'
        await testYouTubeConnection(testUrl)
        break

      case '--set-cookie':
      case '-c':
        await setCookieManually()
        break

      case '--env':
      case '-e':
        await setupEnvironmentVariables()
        break

      case '--guide':
      case '-g':
        generateServerGuide()
        break

      case '--help':
      case '-h':
      default:
        colorLog('cyan', '使用方法:')
        console.log(`
  node scripts/youtube-auth-cli.js [命令]

命令:
  --status, -s          检查Cookie状态
  --test, -t [url]      测试YouTube连通性
  --set-cookie, -c      手动设置Cookie
  --env, -e             设置环境变量
  --guide, -g           生成服务器部署指南
  --help, -h            显示帮助信息

示例:
  node scripts/youtube-auth-cli.js --status
  node scripts/youtube-auth-cli.js --test "https://www.youtube.com/watch?v=qtYt88z_tdw"
  node scripts/youtube-auth-cli.js --set-cookie
        `)
        break
    }
  } catch (error) {
    colorLog('red', `❌ 执行失败: ${error.message}`)
    process.exit(1)
  } finally {
    rl.close()
  }
}

// 如果直接运行此脚本
if (import.meta.url === `file://${process.argv[1]}`) {
  main()
}