import { Logger } from '~/lib/utils/logger'
import { browserManager } from './browser-manager'
import type { Page } from 'puppeteer'
import * as fs from 'fs/promises'
import * as path from 'path'
import os from 'os'
import { ConfigManager } from '~/lib/utils/config'

export interface YouTubeCookie {
  name: string
  value: string
  domain: string
  path: string
  expires?: number
  httpOnly?: boolean
  secure?: boolean
  sameSite?: 'Strict' | 'Lax' | 'None'
}

/**
 * YouTube认证服务
 * 通过手动设置Cookie文件来支持需要登录的YouTube视频
 */
export class YouTubeAuthService {
  private static instance: YouTubeAuthService
  private cookieFilePath: string
  
  private constructor() {
    // 确保在项目根目录下的data/cookies/中
    this.cookieFilePath = path.join(process.cwd(), 'data', 'cookies', 'youtube_cookies.txt')
  }

  public static getInstance(): YouTubeAuthService {
    if (!YouTubeAuthService.instance) {
      YouTubeAuthService.instance = new YouTubeAuthService()
    }
    return YouTubeAuthService.instance
  }

  /**
   * 手动设置Cookie（从外部粘贴）
   * @param cookiesText Netscape格式或浏览器原生Cookie字符串
   */
  async setCookiesManually(cookiesText: string): Promise<boolean> {
    try {
      Logger.info('📋 正在设置手动提供的YouTube Cookie...')
      
      // 确保cookie目录存在
      await fs.mkdir(path.dirname(this.cookieFilePath), { recursive: true })
      
      let cookieContent = cookiesText.trim()

      // 如果是浏览器Cookie字符串格式，简单转换为Netscape格式
      // 注意：这是一个简化转换，对于复杂场景可能不完美，但能覆盖大部分情况
      if (!cookieContent.includes('# Netscape HTTP Cookie File') && cookieContent.includes('=')) {
        Logger.info('...检测到浏览器原生Cookie字符串，正在转换为Netscape格式')
        const netscapeLines = [
          '# Netscape HTTP Cookie File',
          '# Generated by yt-dlpservice',
          ''
        ]
        
        const cookies = cookieContent.split(';').map(c => c.trim())
        for (const cookie of cookies) {
          if (cookie.includes('=')) {
            const [name, ...valueParts] = cookie.split('=')
            const value = valueParts.join('=')
            // 为主要YouTube域名创建条目
            if (name && name.trim()) {
              netscapeLines.push(`.youtube.com\tTRUE\t/\tTRUE\t${Math.floor(Date.now() / 1000) + 31536000}\t${name.trim()}\t${value.trim()}`)
            }
          }
        }
        cookieContent = netscapeLines.join('\n')
      }
      
      // 保存cookie文件
      await fs.writeFile(this.cookieFilePath, cookieContent, 'utf8')
      
      Logger.info(`✅ Cookie已成功保存到: ${this.cookieFilePath}`)
      return true
    } catch (error: any) {
      Logger.error(`保存Cookie失败: ${error.message}`)
      return false
    }
  }

  /**
   * 检查Cookie文件是否存在
   */
  async hasCookies(): Promise<boolean> {
    try {
      await fs.access(this.cookieFilePath)
      const stats = await fs.stat(this.cookieFilePath)
      // 简单检查文件大小，大于0即可
      return stats.size > 0
    } catch {
      return false
    }
  }

  /**
   * 确保有有效的Cookie文件存在
   * 在当前模型下，我们信任用户提供的手动Cookie是有效的
   */
  async ensureValidCookies(): Promise<boolean> {
    const exists = await this.hasCookies()
    if (exists) {
      Logger.info('✅ 检测到YouTube Cookie文件，将用于后续请求')
    } else {
      Logger.warn('⚠️ 未找到YouTube Cookie文件，部分视频可能无法访问')
    }
    return exists
  }

  /**
   * 获取Cookie文件路径
   */
  getCookieFilePath(): string {
    return this.cookieFilePath
  }

  /**
   * 获取默认Chromium Profile路径（供 --cookies-from-browser 使用）
   * 例如: chromium:/home/ubuntu/chrome-profile/Default
   */
  getDefaultBrowserProfilePath(): string {
    const home = os.homedir()
    return path.join(home, 'chrome-profile', 'Default')
  }

  async hasBrowserProfile(): Promise<boolean> {
    try {
      const p = this.getDefaultBrowserProfilePath()
      await fs.access(p)
      return true
    } catch {
      return false
    }
  }

  /**
   * 清除Cookie
   */
  async clearCookies(): Promise<void> {
    try {
      await fs.unlink(this.cookieFilePath)
      Logger.info('Cookie已清除')
    } catch (error: any) {
      // 如果文件不存在，忽略错误
      if (error.code !== 'ENOENT') {
        Logger.error(`清除Cookie失败: ${error.message}`)
        throw error
      }
    }
  }

  /**
   * 生成Cookie设置指南
   */
  generateCookieGuide(): string {
    return `
🍪 YouTube Cookie设置指南 (服务器版)

当遇到需要登录才能访问的YouTube视频时，你需要提供Cookie。

**操作步骤:**

1. **在你的电脑浏览器上操作:**
   - 打开Chrome或Firefox，登录你的YouTube账号。
   - 访问任意YouTube页面。
   - 安装浏览器扩展 "Cookie-Editor"。
   - 点击扩展图标，选择 "Export" -> "Export as Netscape" -> "Copy to Clipboard"。

2. **在服务器管理页面操作:**
   - 访问本应用的 /admin/youtube-auth 页面。
   - 将复制的Cookie内容粘贴到 "手动设置Cookie" 的文本框中。
   - 点击 "设置Cookie" 按钮。

**备用方案: 命令行**

通过SSH登录到服务器，执行以下命令:
node scripts/youtube-auth-cli.js --set-cookie

然后将复制的Cookie内容粘贴进去即可。

**Cookie文件位置:**
${this.cookieFilePath}
    `.trim()
  }
}

export const youtubeAuthService = YouTubeAuthService.getInstance()