import { createTRPCRouter, publicProcedure } from "~/server/api/trpc"
import fs from "fs/promises"
import { existsSync, statSync, createReadStream, createWriteStream } from "fs"
import path from "path"
import { pipeline } from "stream/promises"
import { tmpdir } from "os"
import { db } from "~/server/db"

/**
 * Êï∞ÊçÆÂ∫ìÂ§á‰ªΩ Router
 * Êèê‰æõÊï∞ÊçÆÂ∫ìÂ§á‰ªΩÂíåÊÅ¢Â§çÂäüËÉΩ
 * ÊîØÊåÅ‰∏§ÁßçÂ§á‰ªΩÊ®°ÂºèÔºö
 * 1. Êï∞ÊçÆÂ∫ìÂ§á‰ªΩÔºà‰ªÖÂ§á‰ªΩ app.dbÔºâ
 * 2. ÂÆåÊï¥Â§á‰ªΩÔºàÂ§á‰ªΩÊï∞ÊçÆÂ∫ì + ÊâÄÊúâÂ™í‰ΩìÊñá‰ª∂Ôºâ
 */

// Êï∞ÊçÆÂ∫ìË∑ØÂæÑÈÖçÁΩÆ
const getDatabasePath = () => {
  const databaseUrl = process.env.DATABASE_URL || "file:./data/app.db"
  // ‰ªé DATABASE_URL ÊèêÂèñÂÆûÈôÖÊñá‰ª∂Ë∑ØÂæÑ
  const filePath = databaseUrl.replace("file:", "")

  // Â¶ÇÊûúÊòØÁõ∏ÂØπË∑ØÂæÑÔºåËΩ¨Êç¢‰∏∫ÁªùÂØπË∑ØÂæÑ
  if (!path.isAbsolute(filePath)) {
    return path.join(process.cwd(), filePath)
  }

  return filePath
}

const getDataDirectory = () => {
  const dbPath = getDatabasePath()
  return path.dirname(dbPath)
}

const getBackupPath = () => {
  const dbPath = getDatabasePath()
  return `${dbPath}.backup`
}

const getFullBackupPath = () => {
  const dataDir = getDataDirectory()
  return path.join(dataDir, "full-backup.tar.gz")
}

/**
 * Ëé∑ÂèñÁõÆÂΩïÂ§ßÂ∞è
 */
async function getDirectorySize(dirPath: string): Promise<number> {
  if (!existsSync(dirPath)) {
    return 0
  }

  let totalSize = 0

  async function calculateSize(currentPath: string) {
    const stats = await fs.stat(currentPath)

    if (stats.isFile()) {
      totalSize += stats.size
    } else if (stats.isDirectory()) {
      const files = await fs.readdir(currentPath)
      for (const file of files) {
        await calculateSize(path.join(currentPath, file))
      }
    }
  }

  await calculateSize(dirPath)
  return totalSize
}

export const databaseBackupRouter = createTRPCRouter({
  /**
   * Ëé∑ÂèñÂ§á‰ªΩ‰ø°ÊÅØ
   */
  getBackupInfo: publicProcedure.query(async () => {
    try {
      const dbPath = getDatabasePath()
      const backupPath = getBackupPath()

      const dbExists = existsSync(dbPath)
      const backupExists = existsSync(backupPath)

      let dbSize = 0
      let backupSize = 0
      let backupCreatedAt = null

      if (dbExists) {
        const dbStats = statSync(dbPath)
        dbSize = dbStats.size
      }

      if (backupExists) {
        const backupStats = statSync(backupPath)
        backupSize = backupStats.size
        backupCreatedAt = backupStats.mtime
      }

      return {
        success: true,
        data: {
          databasePath: dbPath,
          backupPath: backupPath,
          databaseExists: dbExists,
          backupExists: backupExists,
          databaseSize: dbSize,
          backupSize: backupSize,
          backupCreatedAt: backupCreatedAt,
          formattedDatabaseSize: formatFileSize(dbSize),
          formattedBackupSize: formatFileSize(backupSize),
        },
      }
    } catch (error) {
      console.error("Ëé∑ÂèñÂ§á‰ªΩ‰ø°ÊÅØÂ§±Ë¥•:", error)
      return {
        success: false,
        message: error instanceof Error ? error.message : "Ëé∑ÂèñÂ§á‰ªΩ‰ø°ÊÅØÂ§±Ë¥•",
      }
    }
  }),

  /**
   * ÂàõÂª∫Â§á‰ªΩ
   */
  createBackup: publicProcedure.mutation(async () => {
    try {
      const dbPath = getDatabasePath()
      const backupPath = getBackupPath()

      // Ê£ÄÊü•Êï∞ÊçÆÂ∫ìÊñá‰ª∂ÊòØÂê¶Â≠òÂú®
      if (!existsSync(dbPath)) {
        return {
          success: false,
          message: `Êï∞ÊçÆÂ∫ìÊñá‰ª∂‰∏çÂ≠òÂú®: ${dbPath}`,
        }
      }

      // Â§çÂà∂Êï∞ÊçÆÂ∫ìÊñá‰ª∂Âà∞Â§á‰ªΩ‰ΩçÁΩÆ
      await fs.copyFile(dbPath, backupPath)

      // Ëé∑ÂèñÂ§á‰ªΩÊñá‰ª∂‰ø°ÊÅØ
      const backupStats = statSync(backupPath)

      return {
        success: true,
        message: "Êï∞ÊçÆÂ∫ìÂ§á‰ªΩÊàêÂäü",
        data: {
          backupPath: backupPath,
          backupSize: backupStats.size,
          formattedBackupSize: formatFileSize(backupStats.size),
          backupCreatedAt: backupStats.mtime,
        },
      }
    } catch (error) {
      console.error("ÂàõÂª∫Â§á‰ªΩÂ§±Ë¥•:", error)
      return {
        success: false,
        message: error instanceof Error ? error.message : "ÂàõÂª∫Â§á‰ªΩÂ§±Ë¥•",
      }
    }
  }),

  /**
   * ÊÅ¢Â§çÂ§á‰ªΩ
   */
  restoreBackup: publicProcedure.mutation(async () => {
    try {
      const dbPath = getDatabasePath()
      const backupPath = getBackupPath()

      console.log('[ÊÅ¢Â§çÂ§á‰ªΩ] ÂºÄÂßãÊÅ¢Â§çÊï∞ÊçÆÂ∫ìÂ§á‰ªΩ')
      console.log('[ÊÅ¢Â§çÂ§á‰ªΩ] Êï∞ÊçÆÂ∫ìË∑ØÂæÑ:', dbPath)
      console.log('[ÊÅ¢Â§çÂ§á‰ªΩ] Â§á‰ªΩÊñá‰ª∂Ë∑ØÂæÑ:', backupPath)

      // Ê£ÄÊü•Â§á‰ªΩÊñá‰ª∂ÊòØÂê¶Â≠òÂú®
      if (!existsSync(backupPath)) {
        console.error('[ÊÅ¢Â§çÂ§á‰ªΩ] Â§á‰ªΩÊñá‰ª∂‰∏çÂ≠òÂú®:', backupPath)
        return {
          success: false,
          message: `Â§á‰ªΩÊñá‰ª∂‰∏çÂ≠òÂú®: ${backupPath}`,
        }
      }

      // Ëé∑ÂèñÂ§á‰ªΩÊñá‰ª∂‰ø°ÊÅØ
      const backupStats = statSync(backupPath)
      console.log('[ÊÅ¢Â§çÂ§á‰ªΩ] Â§á‰ªΩÊñá‰ª∂Â§ßÂ∞è:', backupStats.size, 'bytes')
      console.log('[ÊÅ¢Â§çÂ§á‰ªΩ] Â§á‰ªΩÊñá‰ª∂‰øÆÊîπÊó∂Èó¥:', backupStats.mtime)

      // ÂÖàÂàõÂª∫ÂΩìÂâçÊï∞ÊçÆÂ∫ìÁöÑ‰∏¥Êó∂Â§á‰ªΩÔºà‰ª•Èò≤ÊÅ¢Â§çÂ§±Ë¥•Ôºâ
      const tempBackupPath = `${dbPath}.temp`
      if (existsSync(dbPath)) {
        const currentDbStats = statSync(dbPath)
        console.log('[ÊÅ¢Â§çÂ§á‰ªΩ] ÂΩìÂâçÊï∞ÊçÆÂ∫ìÂ§ßÂ∞è:', currentDbStats.size, 'bytes')
        console.log('[ÊÅ¢Â§çÂ§á‰ªΩ] ÂàõÂª∫‰∏¥Êó∂Â§á‰ªΩ:', tempBackupPath)
        await fs.copyFile(dbPath, tempBackupPath)
      }

      try {
        // Â§çÂà∂Â§á‰ªΩÊñá‰ª∂Âà∞Êï∞ÊçÆÂ∫ì‰ΩçÁΩÆ
        console.log('[ÊÅ¢Â§çÂ§á‰ªΩ] Ê≠£Âú®Â§çÂà∂Â§á‰ªΩÊñá‰ª∂Âà∞Êï∞ÊçÆÂ∫ì‰ΩçÁΩÆ...')
        await fs.copyFile(backupPath, dbPath)

        // È™åËØÅÂ§çÂà∂ÁªìÊûú
        const restoredDbStats = statSync(dbPath)
        console.log('[ÊÅ¢Â§çÂ§á‰ªΩ] ÊÅ¢Â§çÂêéÊï∞ÊçÆÂ∫ìÂ§ßÂ∞è:', restoredDbStats.size, 'bytes')
        console.log('[ÊÅ¢Â§çÂ§á‰ªΩ] Â§çÂà∂ÊàêÂäüÔºåÊñá‰ª∂Â§ßÂ∞èÂåπÈÖç:', restoredDbStats.size === backupStats.size)

        // Âà†Èô§‰∏¥Êó∂Â§á‰ªΩ
        if (existsSync(tempBackupPath)) {
          console.log('[ÊÅ¢Â§çÂ§á‰ªΩ] Âà†Èô§‰∏¥Êó∂Â§á‰ªΩ')
          await fs.unlink(tempBackupPath)
        }

        // üî• ÂÖ≥ÈîÆÔºöÂº∫Âà∂Êñ≠ÂºÄ Prisma ËøûÊé•ÔºåÊ∏ÖÈô§ÁºìÂ≠ò
        console.log('[ÊÅ¢Â§çÂ§á‰ªΩ] Ê≠£Âú®Êñ≠ÂºÄ Prisma Êï∞ÊçÆÂ∫ìËøûÊé•...')
        try {
          await db.$disconnect()
          console.log('[ÊÅ¢Â§çÂ§á‰ªΩ] Prisma ËøûÊé•Â∑≤Êñ≠ÂºÄ')

          // Á≠âÂæÖ‰∏ÄÂ∞èÊÆµÊó∂Èó¥ÔºåÁ°Æ‰øùËøûÊé•ÂÆåÂÖ®ÂÖ≥Èó≠
          await new Promise(resolve => setTimeout(resolve, 100))

          // ÈáçÊñ∞ËøûÊé•
          await db.$connect()
          console.log('[ÊÅ¢Â§çÂ§á‰ªΩ] Prisma Â∑≤ÈáçÊñ∞ËøûÊé•Âà∞Êñ∞Êï∞ÊçÆÂ∫ì')
        } catch (error) {
          console.error('[ÊÅ¢Â§çÂ§á‰ªΩ] ‚ö†Ô∏è Prisma ÈáçËøûË≠¶Âëä:', error)
          // Âç≥‰ΩøÈáçËøûÂ§±Ë¥•‰πü‰∏çÂΩ±ÂìçÊÅ¢Â§çÊàêÂäüÔºå‰∏ãÊ¨°Êü•ËØ¢Êó∂‰ºöËá™Âä®ÈáçËøû
        }

        console.log('[ÊÅ¢Â§çÂ§á‰ªΩ] ‚úÖ Êï∞ÊçÆÂ∫ìÊÅ¢Â§çÊàêÂäü')
        return {
          success: true,
          message: "Êï∞ÊçÆÂ∫ìÊÅ¢Â§çÊàêÂäüÔºåPrisma ËøûÊé•Â∑≤Êõ¥Êñ∞ÔºåËØ∑Âà∑Êñ∞È°µÈù¢",
        }
      } catch (error) {
        console.error('[ÊÅ¢Â§çÂ§á‰ªΩ] ‚ùå ÊÅ¢Â§çÂ§±Ë¥•:', error)
        // Â¶ÇÊûúÊÅ¢Â§çÂ§±Ë¥•ÔºåÂ∞ùËØïËøòÂéü‰∏¥Êó∂Â§á‰ªΩ
        if (existsSync(tempBackupPath)) {
          console.log('[ÊÅ¢Â§çÂ§á‰ªΩ] Ê≠£Âú®ÂõûÊªöÂà∞‰∏¥Êó∂Â§á‰ªΩ...')
          await fs.copyFile(tempBackupPath, dbPath)
          await fs.unlink(tempBackupPath)
          console.log('[ÊÅ¢Â§çÂ§á‰ªΩ] ÂõûÊªöÊàêÂäü')
        }
        throw error
      }
    } catch (error) {
      console.error("ÊÅ¢Â§çÂ§á‰ªΩÂ§±Ë¥•:", error)
      return {
        success: false,
        message: error instanceof Error ? error.message : "ÊÅ¢Â§çÂ§á‰ªΩÂ§±Ë¥•",
      }
    }
  }),

  /**
   * Âà†Èô§Â§á‰ªΩ
   */
  deleteBackup: publicProcedure.mutation(async () => {
    try {
      const backupPath = getBackupPath()

      // Ê£ÄÊü•Â§á‰ªΩÊñá‰ª∂ÊòØÂê¶Â≠òÂú®
      if (!existsSync(backupPath)) {
        return {
          success: false,
          message: "Â§á‰ªΩÊñá‰ª∂‰∏çÂ≠òÂú®",
        }
      }

      // Âà†Èô§Â§á‰ªΩÊñá‰ª∂
      await fs.unlink(backupPath)

      return {
        success: true,
        message: "Â§á‰ªΩÊñá‰ª∂Â∑≤Âà†Èô§",
      }
    } catch (error) {
      console.error("Âà†Èô§Â§á‰ªΩÂ§±Ë¥•:", error)
      return {
        success: false,
        message: error instanceof Error ? error.message : "Âà†Èô§Â§á‰ªΩÂ§±Ë¥•",
      }
    }
  }),

  /**
   * Ëé∑ÂèñÂÆåÊï¥Â§á‰ªΩ‰ø°ÊÅØ
   * ÂåÖÊã¨Êï∞ÊçÆÂ∫ìÂíåÂ™í‰ΩìÊñá‰ª∂ÁöÑÂ§ßÂ∞èÁªüËÆ°
   */
  getFullBackupInfo: publicProcedure.query(async () => {
    try {
      const dbPath = getDatabasePath()
      const dataDir = getDataDirectory()
      const dbBackupPath = getBackupPath()
      const fullBackupPath = getFullBackupPath()

      const dbExists = existsSync(dbPath)
      const dbBackupExists = existsSync(dbBackupPath)
      const fullBackupExists = existsSync(fullBackupPath)

      let dbSize = 0
      let dbBackupSize = 0
      let dbBackupCreatedAt = null
      let fullBackupSize = 0
      let fullBackupCreatedAt = null

      if (dbExists) {
        const dbStats = statSync(dbPath)
        dbSize = dbStats.size
      }

      if (dbBackupExists) {
        const backupStats = statSync(dbBackupPath)
        dbBackupSize = backupStats.size
        dbBackupCreatedAt = backupStats.mtime
      }

      if (fullBackupExists) {
        const fullBackupStats = statSync(fullBackupPath)
        fullBackupSize = fullBackupStats.size
        fullBackupCreatedAt = fullBackupStats.mtime
      }

      // ËÆ°ÁÆóÂ™í‰ΩìÁõÆÂΩïÂ§ßÂ∞è
      const mediaUploadsSize = await getDirectorySize(path.join(dataDir, "media-uploads"))
      const mediaThumbnailsSize = await getDirectorySize(path.join(dataDir, "media-thumbnails"))
      const exportsSize = await getDirectorySize(path.join(dataDir, "exports"))
      const cookiesSize = await getDirectorySize(path.join(dataDir, "cookies"))
      const tempSize = await getDirectorySize(path.join(dataDir, "temp"))

      const totalMediaSize = mediaUploadsSize + mediaThumbnailsSize + exportsSize + cookiesSize + tempSize
      const totalDataSize = dbSize + totalMediaSize

      return {
        success: true,
        data: {
          database: {
            path: dbPath,
            exists: dbExists,
            size: dbSize,
            formattedSize: formatFileSize(dbSize),
          },
          dbBackup: {
            path: dbBackupPath,
            exists: dbBackupExists,
            size: dbBackupSize,
            formattedSize: formatFileSize(dbBackupSize),
            createdAt: dbBackupCreatedAt,
          },
          fullBackup: {
            path: fullBackupPath,
            exists: fullBackupExists,
            size: fullBackupSize,
            formattedSize: formatFileSize(fullBackupSize),
            createdAt: fullBackupCreatedAt,
          },
          mediaDirectories: {
            uploads: {
              size: mediaUploadsSize,
              formattedSize: formatFileSize(mediaUploadsSize),
            },
            thumbnails: {
              size: mediaThumbnailsSize,
              formattedSize: formatFileSize(mediaThumbnailsSize),
            },
            exports: {
              size: exportsSize,
              formattedSize: formatFileSize(exportsSize),
            },
            cookies: {
              size: cookiesSize,
              formattedSize: formatFileSize(cookiesSize),
            },
            temp: {
              size: tempSize,
              formattedSize: formatFileSize(tempSize),
            },
          },
          totalSizes: {
            mediaOnly: totalMediaSize,
            formattedMediaOnly: formatFileSize(totalMediaSize),
            allData: totalDataSize,
            formattedAllData: formatFileSize(totalDataSize),
          },
        },
      }
    } catch (error) {
      console.error("Ëé∑ÂèñÂÆåÊï¥Â§á‰ªΩ‰ø°ÊÅØÂ§±Ë¥•:", error)
      return {
        success: false,
        message: error instanceof Error ? error.message : "Ëé∑ÂèñÂÆåÊï¥Â§á‰ªΩ‰ø°ÊÅØÂ§±Ë¥•",
      }
    }
  }),

  /**
   * Âà†Èô§ÂÆåÊï¥Â§á‰ªΩ
   */
  deleteFullBackup: publicProcedure.mutation(async () => {
    try {
      const fullBackupPath = getFullBackupPath()

      if (!existsSync(fullBackupPath)) {
        return {
          success: false,
          message: "ÂÆåÊï¥Â§á‰ªΩÊñá‰ª∂‰∏çÂ≠òÂú®",
        }
      }

      await fs.unlink(fullBackupPath)

      return {
        success: true,
        message: "ÂÆåÊï¥Â§á‰ªΩÊñá‰ª∂Â∑≤Âà†Èô§",
      }
    } catch (error) {
      console.error("Âà†Èô§ÂÆåÊï¥Â§á‰ªΩÂ§±Ë¥•:", error)
      return {
        success: false,
        message: error instanceof Error ? error.message : "Âà†Èô§ÂÆåÊï¥Â§á‰ªΩÂ§±Ë¥•",
      }
    }
  }),
})

/**
 * Ê†ºÂºèÂåñÊñá‰ª∂Â§ßÂ∞è
 */
function formatFileSize(bytes: number): string {
  if (bytes === 0) return "0 B"

  const k = 1024
  const sizes = ["B", "KB", "MB", "GB"]
  const i = Math.floor(Math.log(bytes) / Math.log(k))

  return `${(bytes / Math.pow(k, i)).toFixed(2)} ${sizes[i]}`
}
