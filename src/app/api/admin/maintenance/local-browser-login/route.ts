import { NextResponse } from 'next/server'
import puppeteer from 'puppeteer'
import * as fs from 'fs/promises'
import path from 'path'
import { Logger } from '~/lib/utils/logger'

/**
 * 启动本地有头浏览器进行YouTube登录
 * 用户在本地浏览器窗口中登录后，自动保存cookie
 * 使用增强的反检测技术来避免 Google 的自动化检测
 */
export async function POST() {
  let browser: any = null

  try {
    const repoRoot = process.cwd()
    const cookiesDir = path.join(repoRoot, 'data', 'cookies')
    await fs.mkdir(cookiesDir, { recursive: true })

    Logger.info('启动本地有头浏览器进行 YouTube 登录（反检测模式）')

    // 启动有头浏览器，使用增强的反检测参数
    browser = await puppeteer.launch({
      headless: false,
      args: [
        '--no-sandbox',
        '--disable-setuid-sandbox',
        '--disable-blink-features=AutomationControlled',  // 关键：隐藏自动化控制特征
        '--disable-dev-shm-usage',
        '--disable-web-security',
        '--disable-features=IsolateOrigins,site-per-process',
        '--window-size=1280,900',
        '--start-maximized',
        // 更真实的用户代理
        '--user-agent=Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36'
      ],
      ignoreDefaultArgs: ['--enable-automation'],  // 移除自动化标志
    })

    const page = await browser.newPage()

    // 注入反检测脚本 - 必须在页面加载前执行
    await page.evaluateOnNewDocument(() => {
      // 1. 移除 webdriver 标志
      Object.defineProperty(navigator, 'webdriver', {
        get: () => false,
      })

      // 2. 覆盖 Chrome 对象
      // @ts-expect-error - Override chrome object for stealth
      window.navigator.chrome = {
        runtime: {},
      }

      // 3. 覆盖 permissions API
      const originalQuery = window.navigator.permissions.query
      window.navigator.permissions.query = (parameters: any) => (
        parameters.name === 'notifications' ?
          Promise.resolve({ state: Notification.permission }) as any :
          originalQuery(parameters)
      )

      // 4. 添加更多插件以模拟真实浏览器
      Object.defineProperty(navigator, 'plugins', {
        get: () => [1, 2, 3, 4, 5],
      })

      // 5. 设置真实的语言列表
      Object.defineProperty(navigator, 'languages', {
        get: () => ['en-US', 'en', 'zh-CN', 'zh'],
      })

      // 6. 覆盖 platform
      Object.defineProperty(navigator, 'platform', {
        get: () => 'MacIntel',
      })

      // 7. 移除 window.chrome.loadTimes (只有自动化浏览器有这个)
      // @ts-expect-error - Remove automation detection properties
      delete window.chrome.loadTimes
      // @ts-expect-error - Remove automation detection properties
      delete window.chrome.csi
    })

    page.setDefaultTimeout(120000)

    // 设置更真实的视口
    await page.setViewport({ width: 1280, height: 900 })

    // 导航到 YouTube
    Logger.info('正在打开 YouTube...')
    await page.goto('https://www.youtube.com', {
      waitUntil: 'networkidle2'
    })

    Logger.info('YouTube 页面已打开，等待用户登录...')

    // 等待用户登录（检测是否出现用户头像或频道按钮）
    const checkLoginInterval = setInterval(async () => {
      try {
        // 检查页面是否还存在
        if (page.isClosed()) {
          clearInterval(checkLoginInterval)
          return
        }

        // 检查是否已登录（通过检测用户菜单按钮）
        const isLoggedIn = await page.evaluate(() => {
          const avatarButton = document.querySelector('button[aria-label*="Google Account"]') ||
                              document.querySelector('ytd-topbar-menu-button-renderer#avatar-btn') ||
                              document.querySelector('#avatar-btn') ||
                              document.querySelector('button#avatar-btn')
          return !!avatarButton
        })

        if (isLoggedIn) {
          clearInterval(checkLoginInterval)
          Logger.info('检测到用户已登录，正在保存 Cookie...')

          // 获取所有 cookies
          const cookies = await page.cookies()

          // 转换为 Netscape 格式
          const netscapeCookies = [
            '# Netscape HTTP Cookie File',
            '# This file was generated by yt-dlp service',
            '# Edit at your own risk.',
            ''
          ]

          for (const cookie of cookies) {
            if (cookie.domain.includes('youtube.com') || cookie.domain.includes('google.com')) {
              const domain = cookie.domain.startsWith('.') ? cookie.domain : '.' + cookie.domain
              const flag = 'TRUE'
              const path = cookie.path
              const secure = cookie.secure ? 'TRUE' : 'FALSE'
              const expiration = cookie.expires ? Math.floor(cookie.expires) : 0
              const name = cookie.name
              const value = cookie.value

              netscapeCookies.push(`${domain}\t${flag}\t${path}\t${secure}\t${expiration}\t${name}\t${value}`)
            }
          }

          // 保存 cookie 文件
          const cookieFile = path.join(cookiesDir, 'youtube_cookies.txt')
          await fs.writeFile(cookieFile, netscapeCookies.join('\n'), 'utf-8')

          Logger.info(`YouTube cookies 已保存到: ${cookieFile}，共 ${cookies.length} 个`)

          // 在页面上显示成功消息
          await page.evaluate(() => {
            const banner = document.createElement('div')
            banner.style.cssText = `
              position: fixed;
              top: 20px;
              left: 50%;
              transform: translateX(-50%);
              background: #4CAF50;
              color: white;
              padding: 20px 40px;
              border-radius: 8px;
              font-size: 18px;
              font-weight: bold;
              z-index: 999999;
              box-shadow: 0 4px 12px rgba(0,0,0,0.3);
            `
            banner.textContent = '✅ 登录成功！Cookie 已保存，浏览器将在 5 秒后自动关闭...'
            document.body.appendChild(banner)
          })

          // 等待5秒后关闭
          await new Promise(resolve => setTimeout(resolve, 5000))

          if (!page.isClosed()) {
            await page.close()
          }

          if (browser) {
            await browser.close()
          }

          Logger.info('本地浏览器登录完成，浏览器已关闭')
        }
      } catch (error) {
        Logger.error('检查登录状态时出错', error)
        clearInterval(checkLoginInterval)
      }
    }, 3000) // 每3秒检查一次

    // 30分钟后超时
    setTimeout(async () => {
      clearInterval(checkLoginInterval)
      try {
        if (page && !page.isClosed()) {
          await page.close()
        }
        if (browser) {
          await browser.close()
        }
        Logger.warn('本地浏览器登录超时（30分钟），已自动关闭')
      } catch {
        // 忽略关闭错误
      }
    }, 30 * 60 * 1000)

    return NextResponse.json({
      success: true,
      message: '本地浏览器已启动，请在浏览器窗口中完成 YouTube 登录',
      note: '登录成功后 cookie 将自动保存，浏览器会自动关闭',
      tips: [
        '如果遇到 "This browser or app may not be secure" 错误，请尝试：',
        '1. 在弹出的浏览器中先访问 gmail.com 登录',
        '2. 登录成功后再访问 youtube.com',
        '3. 或者使用"方式2：远程浏览器登录"'
      ]
    })

  } catch (error) {
    Logger.error('启动本地浏览器失败', error)

    // 确保清理资源
    try {
      if (browser) {
        await browser.close()
      }
    } catch {
      // 忽略清理错误
    }

    return NextResponse.json({
      success: false,
      error: (error as Error).message
    }, { status: 500 })
  }
}
