generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Task {
  id                  String    @id @default(cuid())
  url                 String
  platform            String
  title               String?
  status              String
  downloadType        String    @default("AUDIO_ONLY")
  videoPath           String?
  audioPath           String?
  originalVideoPath   String?
  originalAudioPath   String?
  transcription       String?
  tingwuTaskId        String?
  sttProvider         String?
  googleSttLanguage   String?
  enableTranscription Boolean   @default(true)
  duration            Int?
  fileSize            Int?
  thumbnail           String?
  description         String?
  compressionPreset   String?   @default("none")
  originalFileSize    Int?
  compressedFileSize  Int?
  compressionRatio    Float?
  compressionDuration Int?
  retryCount          Int       @default(0)
  errorMessage        String?
  extraMetadata       String?
  s3Url               String?
  s3TransferStatus    String?   @default("none")
  s3TransferFileType  String?   @default("none")
  s3TransferProgress  String?
  s3TransferredAt     DateTime?
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt

  @@index([status])
  @@map("tasks")
}

model Config {
  id        String   @id @default(cuid())
  key       String   @unique
  value     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("configs")
}

model SttJob {
  id                 String    @id @default(cuid())
  audioPath          String
  originalName       String
  fileSize           Int
  duration           Float?
  provider           String
  languageCode       String?
  compressionPreset  String?
  originalFileSize   Int?
  compressedFileSize Int?
  compressionRatio   Float?
  status             String    @default("PENDING")
  errorMessage       String?
  transcription      String?
  metadata           String?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  completedAt        DateTime?

  @@index([status])
  @@index([createdAt])
  @@map("stt_jobs")
}

model AIPlatform {
  id          String       @id @default(cuid())
  name        String       @unique
  slug        String       @unique
  description String?
  website     String?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  providers   AIProvider[]

  @@index([slug])
  @@map("ai_platforms")
}

model AIProvider {
  id           String      @id @default(cuid())
  name         String
  slug         String      @unique
  description  String?
  platformId   String?
  apiEndpoint  String?
  apiKey       String?     // 单一密钥（兼容大部分供应商）
  apiKeyId     String?     // 多密钥方案的ID部分（如火山引擎AccessKeyID）
  apiKeySecret String?     // 多密钥方案的Secret部分（如火山引擎SecretAccessKey）
  uploadToS3   Boolean     @default(false)
  s3PathPrefix String?
  isActive     Boolean     @default(true)
  sortOrder    Int         @default(0)
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  models       AIModel[]
  platform     AIPlatform? @relation(fields: [platformId], references: [id])

  @@index([slug])
  @@index([isActive])
  @@map("ai_providers")
}

model AIModel {
  id                 String             @id @default(cuid())
  name               String
  slug               String             @unique
  description        String?
  providerId         String
  outputType         String
  adapterName        String
  inputCapabilities  String?
  outputCapabilities String?
  featureTags        String?
  functionTags       String?
  usageCount         Int                @default(0)
  isActive           Boolean            @default(true)
  sortOrder          Int                @default(0)
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @updatedAt
  pricingInfo        String?
  tasks              AIGenerationTask[]
  studioFrames       StudioFrame[]
  provider           AIProvider         @relation(fields: [providerId], references: [id], onDelete: Cascade)

  @@index([slug])
  @@index([providerId])
  @@index([outputType])
  @@index([isActive])
  @@map("ai_models")
}

model AIGenerationTask {
  id              String         @id @default(cuid())
  modelId         String
  prompt          String
  inputImages     String?
  numberOfOutputs Int            @default(1)
  parameters      String?
  status          String         @default("PENDING")
  progress        Float?
  results         String?
  errorMessage    String?
  providerTaskId  String?
  requestPayload  String?
  responsePayload String?
  durationMs      Int?
  shotId          String?        // 关联的镜头ID（可选）
  costUSD         Float?         // 任务消耗成本（美元）
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  completedAt     DateTime?
  deletedAt       DateTime?
  model           AIModel        @relation(fields: [modelId], references: [id], onDelete: Cascade)
  studioFrames    StudioFrame[]
  shot            StudioShot?    @relation(fields: [shotId], references: [id], onDelete: SetNull)

  @@index([status])
  @@index([modelId])
  @@index([createdAt])
  @@index([deletedAt])
  @@index([shotId])
  @@map("ai_generation_tasks")
}

model ApiKey {
  id        String   @id @default(cuid())
  name      String
  keyPrefix String   @unique
  hashedKey String
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([keyPrefix])
  @@map("api_keys")
}

model StorageFile {
  id         String   @id @default(cuid())
  fileName   String
  storedName String
  s3Url      String
  s3Key      String
  fileSize   Int
  mimeType   String?
  pathPrefix String   @default("yt")
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@index([createdAt])
  @@map("storage_files")
}

model User {
  id             String           @id @default(cuid())
  username       String           @unique
  password       String
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  mediaActors    MediaActor[]
  mediaFiles     MediaFile[]
  mediaFolders   MediaFolder[]
  mediaTags      MediaTag[]
  studioProjects StudioProject[]
  digitalHumanTasks DigitalHumanTask[]

  @@map("users")
}

model MediaFile {
  id            String       @id @default(cuid())
  userId        String
  name          String
  remark        String?
  type          String
  source        String
  sourceUrl     String?
  localPath     String?
  originalPath  String?
  thumbnailPath String?
  fileSize      Int?
  mimeType      String?
  width         Int?
  height        Int?
  duration      Float?
  folderId      String?
  actorId       String?
  starred       Boolean      @default(false)
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  actor         MediaActor?  @relation(fields: [actorId], references: [id])
  folder        MediaFolder? @relation(fields: [folderId], references: [id])
  user          User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  tags          MediaTag[]   @relation("MediaFileToMediaTag")

  @@index([userId])
  @@index([folderId])
  @@index([actorId])
  @@index([type])
  @@index([source])
  @@index([starred])
  @@map("media_files")
}

// 数字人任务类型枚举
enum DigitalHumanStage {
  FACE_RECOGNITION_SUBMITTED    // 主体识别已提交
  FACE_RECOGNITION_PROCESSING   // 主体识别处理中
  FACE_RECOGNITION_COMPLETED    // 主体识别完成
  SUBJECT_DETECTION_COMPLETED   // 主体检测完成（多主体模式）
  AWAITING_SUBJECT_SELECTION    // 等待用户选择主体
  VIDEO_GENERATION_SUBMITTED    // 视频生成已提交
  VIDEO_GENERATION_PROCESSING   // 视频生成处理中
  VIDEO_GENERATION_COMPLETED    // 视频生成完成
  FAILED                         // 失败
}

// 数字人任务表
model DigitalHumanTask {
  id                        String               @id @default(cuid())
  userId                    String
  name                      String               // 任务名称
  imageUrl                  String               // 输入图片URL
  audioUrl                  String               // 输入音频URL
  maskUrls                  String?              // JSON: 检测到的主体mask URL数组
  selectedMaskIndex         Int?                 // 用户选择的mask索引
  prompt                    String?              // 提示词
  seed                      Int?                 // 随机种子
  peFastMode                Boolean              @default(false)
  enableMultiSubject        Boolean              @default(false)
  stage                     DigitalHumanStage    @default(FACE_RECOGNITION_SUBMITTED)
  faceRecognitionTaskId     String?              // 步骤1的task_id
  subjectDetectionTaskId    String?              // 步骤2的task_id（如果有的话）
  videoGenerationTaskId     String?              // 步骤3的task_id
  resultVideoUrl            String?              // 最终生成的视频URL
  aigcMetaTagged            Boolean?
  errorMessage              String?
  metadata                  String?              // JSON: 其他元数据
  createdAt                 DateTime             @default(now())
  updatedAt                 DateTime             @updatedAt

  user                      User                 @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([stage])
  @@index([createdAt])
  @@map("digital_human_tasks")
}

model MediaFolder {
  id        String      @id @default(cuid())
  userId    String
  name      String
  color     String?
  icon      String?
  sortOrder Int         @default(0)
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  files     MediaFile[]
  user      User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, name])
  @@index([userId])
  @@map("media_folders")
}

model MediaActor {
  id                 String             @id @default(cuid())
  userId             String
  name               String
  avatarUrl          String?
  referenceImageUrl  String?            // 形象参考图
  bio                String?
  appearancePrompt   String?            // AI 生成用的外观描述
  tags               String?            // JSON: 标签数组
  voiceId            String?            // ElevenLabs TTS Voice ID
  sortOrder          Int                @default(0)
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @updatedAt
  user               User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  files              MediaFile[]
  studioCharacters   StudioCharacter[]

  @@unique([userId, name])
  @@index([userId])
  @@map("media_actors")
}

model MediaTag {
  id        String      @id @default(cuid())
  userId    String
  name      String
  color     String      @default("#gray")
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  user      User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  files     MediaFile[] @relation("MediaFileToMediaTag")

  @@unique([userId, name])
  @@index([userId])
  @@map("media_tags")
}

model LLMProvider {
  id          String        @id @default(cuid())
  name        String
  slug        String        @unique
  description String?
  apiKey      String?
  isActive    Boolean       @default(true)
  sortOrder   Int           @default(0)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  endpoints   LLMEndpoint[]

  @@index([slug])
  @@index([isActive])
  @@map("llm_providers")
}

model LLMEndpoint {
  id          String      @id @default(cuid())
  providerId  String
  name        String
  url         String
  type        String      @default("openai") // openai, claude, etc.
  description String?
  isActive    Boolean     @default(true)
  sortOrder   Int         @default(0)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  provider    LLMProvider @relation(fields: [providerId], references: [id], onDelete: Cascade)
  models      LLMModel[]

  @@unique([providerId, name])
  @@index([providerId])
  @@index([isActive])
  @@map("llm_endpoints")
}

model LLMModel {
  id          String      @id @default(cuid())
  endpointId  String
  name        String
  slug        String
  description String?
  isActive    Boolean     @default(true)
  sortOrder   Int         @default(0)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  endpoint    LLMEndpoint @relation(fields: [endpointId], references: [id], onDelete: Cascade)

  @@unique([endpointId, slug])
  @@index([endpointId])
  @@index([isActive])
  @@map("llm_models")
}

model ErrorLog {
  id         String    @id @default(cuid())
  level      String
  source     String
  message    String
  stack      String?
  context    String?
  requestId  String?
  taskId     String?
  resolved   Boolean   @default(false)
  resolvedAt DateTime?
  resolvedBy String?
  createdAt  DateTime  @default(now())

  @@index([level])
  @@index([source])
  @@index([createdAt])
  @@index([resolved])
  @@map("error_logs")
}

model SystemAlert {
  id             String    @id @default(cuid())
  type           String
  severity       String
  message        String
  details        String?
  sentAt         DateTime?
  channel        String?
  acknowledged   Boolean   @default(false)
  acknowledgedAt DateTime?
  acknowledgedBy String?
  createdAt      DateTime  @default(now())

  @@index([severity])
  @@index([acknowledged])
  @@index([createdAt])
  @@map("system_alerts")
}

// ============================================
// AI 对话功能
// ============================================

// AI对话会话表
model ChatConversation {
  id                String        @id @default(cuid())
  provider          String        // 供应商：gemini, deepseek, grok
  model             String        // 模型名称
  systemInstruction String?       // 系统提示词
  enableWebSearch   Boolean       @default(false) // 是否启用联网搜索（仅Gemini）
  messages          ChatMessage[]
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt

  @@index([updatedAt])
  @@map("chat_conversations")
}

// AI对话消息表
model ChatMessage {
  id             String           @id @default(cuid())
  conversationId String
  role           String           // user, assistant
  content        String           // 消息内容
  metadata       String?          // JSON格式元数据（如Gemini的groundingMetadata）
  createdAt      DateTime         @default(now())
  conversation   ChatConversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  @@index([conversationId, createdAt])
  @@map("chat_messages")
}

// ============================================
// Studio - AI 短片制作工作流系统
// ============================================

// Studio 项目(工作流类型)
model StudioProject {
  id          String            @id @default(cuid())
  userId      String
  name        String            // 如 "英语对话教学"
  description String?
  slug        String            @unique // workflow-english-dialog
  config      String?           // JSON: 工作流特定配置
  sortOrder   Int               @default(0)
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  user        User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  episodes    StudioEpisode[]
  characters  StudioCharacter[]

  @@unique([userId, slug])
  @@index([userId])
  @@map("studio_projects")
}

// 集(Episode) - 归档单位
model StudioEpisode {
  id            String            @id @default(cuid())
  projectId     String
  episodeNumber Int               // 第几集
  title         String?
  status        String            @default("draft") // draft/in-progress/completed/archived
  rawInput      String?           // JSON: 原始输入素材
  corePoint     String?           // 核心看点
  objective     String?           // 目标确定结果
  objectiveLLM  String?           // 使用的LLM记录(JSON)
  systemPrompt  String?           // 目标确定的 System Prompt
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt
  archivedAt    DateTime?
  project       StudioProject     @relation(fields: [projectId], references: [id], onDelete: Cascade)
  setting       StudioSetting?
  shots         StudioShot[]
  characters    StudioCharacter[] // 从该集提取的角色

  @@unique([projectId, episodeNumber])
  @@index([projectId])
  @@index([status])
  @@map("studio_episodes")
}

// 背景/场景/全局设定
model StudioSetting {
  id              String        @id @default(cuid())
  episodeId       String        @unique
  era             String?       // 时代
  genre           String?       // 类型
  visualStyle     String?       // 视觉风格描述
  referenceImages String?       // JSON: 参考图像URL数组
  stylePrompt     String?       // 全局风格Prompt
  lightingPrompt  String?       // 灯光Prompt
  colorPrompt     String?       // 色调Prompt
  customPrompts   String?       // JSON: 自定义Prompt片段
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  episode         StudioEpisode @relation(fields: [episodeId], references: [id], onDelete: Cascade)

  @@index([episodeId])
  @@map("studio_settings")
}

// 角色库(可从MediaActor导入)
model StudioCharacter {
  id               String                @id @default(cuid())
  projectId        String
  name             String
  description      String?
  sourceActorId    String?               // 从MediaActor导入时记录来源
  sourceEpisodeId  String?               // 从Episode的objective提取时记录来源
  appearancePrompt String?               // 角色外观描述
  referenceImage   String?               // 参考图URL
  voiceId          String?               // ElevenLabs TTS Voice ID (从MediaActor同步)
  metadata         String?               // JSON: 其他元数据
  sortOrder        Int                   @default(0)
  createdAt        DateTime              @default(now())
  updatedAt        DateTime              @updatedAt
  project          StudioProject         @relation(fields: [projectId], references: [id], onDelete: Cascade)
  sourceActor      MediaActor?           @relation(fields: [sourceActorId], references: [id], onDelete: SetNull)
  sourceEpisode    StudioEpisode?        @relation(fields: [sourceEpisodeId], references: [id], onDelete: SetNull)
  shotCharacters   StudioShotCharacter[]

  @@unique([projectId, name])
  @@index([projectId])
  @@index([sourceActorId])
  @@index([sourceEpisodeId])
  @@map("studio_characters")
}

// 镜头
model StudioShot {
  id              String                @id @default(cuid())
  episodeId       String
  shotNumber      Int                   // 镜头序号
  name            String?               // 镜头名称
  description     String?               // 镜头描述
  scenePrompt     String?               // 场景描述
  actionPrompt    String?               // 动作描述
  cameraPrompt    String?               // 镜头运动 / 原始音频URL
  dialogue        String?               // 对话内容(全局)
  duration        Float?                // 预期时长(秒)
  extendedAudioUrl String?              // 扩展后的音频URL (前后各增加2秒)
  notes           String?               // 备注
  createdAt       DateTime              @default(now())
  updatedAt       DateTime              @updatedAt
  episode         StudioEpisode         @relation(fields: [episodeId], references: [id], onDelete: Cascade)
  characters      StudioShotCharacter[]
  frames          StudioFrame[]
  generationTasks AIGenerationTask[]    // 关联的AI生成任务

  @@unique([episodeId, shotNumber])
  @@index([episodeId])
  @@map("studio_shots")
}

// 镜头-角色关联表
model StudioShotCharacter {
  id          String          @id @default(cuid())
  shotId      String
  characterId String
  dialogue    String?         // 该角色在这个镜头的台词
  position    String?         // 角色位置描述
  action      String?         // 角色动作
  sortOrder   Int             @default(0)
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  shot        StudioShot      @relation(fields: [shotId], references: [id], onDelete: Cascade)
  character   StudioCharacter @relation(fields: [characterId], references: [id], onDelete: Cascade)

  @@unique([shotId, characterId])
  @@index([shotId])
  @@index([characterId])
  @@map("studio_shot_characters")
}

// 帧/生成资产(首帧图、动画视频)
model StudioFrame {
  id            String               @id @default(cuid())
  shotId        String
  type          String               // 'keyframe' | 'animation'
  version       Int                  // 版本号
  prompt        String               // 完整prompt(合并了全局设定)
  modelId       String
  taskId        String?              // 关联的生成任务
  inputImages   String?              // JSON: 输入图像(如基于首帧生成动画)
  parameters    String?              // JSON: 生成参数
  resultUrl     String?              // 结果URL
  status        String               @default("pending") // pending/generating/completed/failed
  errorMessage  String?
  isSelected    Boolean              @default(false) // 是否为当前选中版本
  metadata      String?              // JSON: 其他元数据
  createdAt     DateTime             @default(now())
  updatedAt     DateTime             @updatedAt
  shot          StudioShot           @relation(fields: [shotId], references: [id], onDelete: Cascade)
  model         AIModel              @relation(fields: [modelId], references: [id], onDelete: Restrict)
  task          AIGenerationTask?    @relation(fields: [taskId], references: [id], onDelete: SetNull)

  @@unique([shotId, type, version])
  @@index([shotId])
  @@index([modelId])
  @@index([taskId])
  @@index([status])
  @@map("studio_frames")
}
