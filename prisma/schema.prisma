// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// 任务状态枚举
enum TaskStatus {
  PENDING      // 等待处理
  EXTRACTING   // 下载并提取音频中
  TRANSCRIBING // 转录中
  COMPLETED    // 完成
  FAILED       // 失败
}

// 下载类型枚举
enum DownloadType {
  AUDIO_ONLY   // 只下载音频
  VIDEO_ONLY   // 只下载视频
  BOTH         // 同时下载视频和音频
}

// 任务表
model Task {
  id            String     @id @default(cuid())
  url           String     // 原始视频URL
  platform      String     // 平台类型 (youtube, bilibili, etc.)
  title         String?    // 视频标题
  status        TaskStatus // 任务状态
  downloadType  DownloadType @default(AUDIO_ONLY) // 下载类型
  
  // 文件路径 (可能只有其中一个或两个都有)
  videoPath     String?    // 下载的视频文件路径
  audioPath     String?    // 提取的音频文件路径
  originalVideoPath String? // 压缩前的原始视频路径 (用于S3转存原文件)
  originalAudioPath String? // 压缩前的原始音频路径 (用于S3转存原文件)
  
  // 转录相关
  transcription String?    // 转录文本
  tingwuTaskId  String?    // 通义转录任务ID
  sttProvider   String?    // STT服务提供商 (google, doubao, doubao-small, tingwu)
  googleSttLanguage String?  // Google STT语言代码 (cmn-Hans-CN, en-US)
  enableTranscription Boolean @default(true)  // 是否启用语音识别

  // 元数据
  duration      Int?       // 视频时长（秒）
  fileSize      Int?       // 文件大小（字节）
  thumbnail     String?    // 缩略图URL
  description   String?    // 内容描述
  
  // 音频压缩相关
  compressionPreset    String?  @default("none")  // 压缩预设: none, light, standard, heavy
  originalFileSize     Int?     // 压缩前文件大小（字节）
  compressedFileSize   Int?     // 压缩后文件大小（字节）
  compressionRatio     Float?   // 压缩比例 (0-1)
  compressionDuration  Int?     // 压缩耗时（毫秒）
  
  // 重试和错误处理
  retryCount    Int        @default(0)
  errorMessage  String?    // 错误信息
  
  // 额外元数据（JSON格式存储平台特定数据和评论等）
  extraMetadata String?    // JSON格式存储额外元数据

  // S3转存相关
  s3Url         String?    // S3存储URL (如果已转存)
  s3TransferStatus String? @default("none") // 转存状态: none, pending, uploading, completed, failed
  s3TransferFileType String? @default("none") // 转存文件类型: none, compressed, original
  s3TransferProgress String? // 转存进度信息或错误消息
  s3TransferredAt DateTime? // 转存完成时间

  // 时间戳
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt

  @@index([status])
  @@map("tasks")
}

// 配置表
model Config {
  id        String   @id @default(cuid())
  key       String   @unique
  value     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("configs")
}

// STT任务状态枚举
enum SttJobStatus {
  PENDING      // 等待处理
  PROCESSING   // 处理中
  COMPLETED    // 完成
  FAILED       // 失败
}

// STT任务表（REST API异步任务记录）
model SttJob {
  id            String       @id @default(cuid())

  // 音频文件信息
  audioPath     String       // 音频文件路径
  originalName  String       // 原始文件名
  fileSize      Int          // 文件大小（字节）
  duration      Float?       // 音频时长（秒）

  // STT配置
  provider      String       // STT服务提供商 (google, doubao, doubao-small)
  languageCode  String?      // 语言代码（Google STT专用）

  // 压缩信息
  compressionPreset    String?  // 压缩预设: none, light, standard, heavy
  originalFileSize     Int?     // 压缩前文件大小（字节）
  compressedFileSize   Int?     // 压缩后文件大小（字节）
  compressionRatio     Float?   // 压缩比例 (0-1)

  // 任务状态
  status        SttJobStatus @default(PENDING)
  errorMessage  String?      // 错误信息

  // 转录结果
  transcription String?      // 转录文本

  // 元数据
  metadata      String?      // JSON格式存储额外信息

  // 时间戳
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  completedAt   DateTime?    // 完成时间

  @@index([status])
  @@index([createdAt])
  @@map("stt_jobs")
}

// ============================================
// AI 内容生成服务 - V2 架构
// ============================================

// 平台表（第三方平台：TuZi, Replicate, Pollo 等）
model AIPlatform {
  id          String      @id @default(cuid())
  name        String      @unique // "TuZi", "Replicate", "Pollo"
  slug        String      @unique // "tuzi", "replicate", "pollo"
  description String?
  website     String?     // 官网

  providers   AIProvider[]

  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  @@index([slug])
  @@map("ai_platforms")
}

// 供应商表
model AIProvider {
  id              String      @id @default(cuid())
  name            String      // "Kie.ai", "OpenAI", "TuZi", "Replicate"
  slug            String      @unique // "kie-ai", "openai", "tuzi", "replicate"
  description     String?

  // 平台关联（可选，官方供应商没有平台）
  platformId      String?
  platform        AIPlatform? @relation(fields: [platformId], references: [id])

  // API 配置（供应商级别）
  apiEndpoint     String?     // 基础 API 端点
  apiKey          String?     // API Key（明文存储，系统安全性要求不高）

  // S3存储配置（可选，用于自动上传生成结果）
  uploadToS3      Boolean     @default(false) // 是否自动上传到S3
  s3PathPrefix    String?     // S3路径前缀，如 "ai-generation/kie/"

  // 关联模型
  models          AIModel[]

  isActive        Boolean     @default(true)
  sortOrder       Int         @default(0) // 前端排序

  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt

  @@index([slug])
  @@index([isActive])
  @@map("ai_providers")
}

// 输出类型枚举
enum AIOutputType {
  IMAGE
  VIDEO
  AUDIO
}

// 模型表
model AIModel {
  id              String       @id @default(cuid())
  name            String       // "4o Image", "Flux Kontext", "Midjourney"
  slug            String       @unique // "4o-image", "flux-kontext", "midjourney"
  description     String?

  // 供应商关联
  providerId      String
  provider        AIProvider   @relation(fields: [providerId], references: [id], onDelete: Cascade)

  // 输出类型
  outputType      AIOutputType // IMAGE, VIDEO, AUDIO

  // 适配器配置
  adapterName     String       // "KieImageAdapter", "KieFluxKontextAdapter"

  // 能力标签（JSON 数组字符串）
  inputCapabilities  String?   // ["text-input", "image-input", "video-input"]
  outputCapabilities String?   // ["image-output", "video-output"]
  featureTags        String?   // ["high-quality", "fast", "low-cost", "4k", "hd"]
  functionTags       String?   // ["text-to-image", "image-to-image", "text-to-video"]

  // 使用统计
  usageCount      Int          @default(0)

  // 费用说明
  pricingInfo     String?      // 费用说明（可选，显示在生成按钮下方）

  // 状态
  isActive        Boolean      @default(true)
  sortOrder       Int          @default(0) // 前端排序

  // 关联任务
  tasks           AIGenerationTask[]

  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt

  @@index([slug])
  @@index([providerId])
  @@index([outputType])
  @@index([isActive])
  @@map("ai_models")
}

// 任务状态枚举
enum AITaskStatus {
  PENDING      // 等待处理
  PROCESSING   // 处理中
  SUCCESS      // 成功
  FAILED       // 失败
  CANCELLED    // 已取消
}

// 生成任务表
model AIGenerationTask {
  id              String       @id @default(cuid())

  // 模型关联
  modelId         String
  model           AIModel      @relation(fields: [modelId], references: [id], onDelete: Cascade)

  // 请求信息
  prompt          String
  inputImages     String?      // JSON 数组: ["url1", "url2"]
  numberOfOutputs Int          @default(1)
  parameters      String?      // JSON 对象（动态参数）

  // 状态
  status          AITaskStatus @default(PENDING)
  progress        Float?       // 0-1

  // 结果
  results         String?      // JSON: [{type, url, metadata}]
  errorMessage    String?

  // 供应商任务ID（用于轮询）
  providerTaskId  String?

  // 元数据（可选，用于调试）
  requestPayload  String?
  responsePayload String?

  // 统计
  durationMs      Int?

  // 时间戳
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
  completedAt     DateTime?

  // 软删除
  deletedAt       DateTime?

  @@index([status])
  @@index([modelId])
  @@index([createdAt])
  @@index([deletedAt])
  @@map("ai_generation_tasks")
}

// API 密钥管理表（保留用于访问控制）
model ApiKey {
  id           String   @id @default(cuid())
  name         String   // 密钥描述
  keyPrefix    String   @unique // 密钥前6位
  hashedKey    String   // SHA256 哈希值
  isActive     Boolean  @default(true)

  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@index([keyPrefix])
  @@map("api_keys")
}

// S3 存储文件记录表
model StorageFile {
  id           String   @id @default(cuid())
  fileName     String   // 原始文件名
  storedName   String   // 存储的文件名
  s3Url        String   // S3完整URL
  s3Key        String   // S3 Key (pathPrefix/fileName)
  fileSize     Int      // 文件大小（字节）
  mimeType     String?  // MIME类型
  pathPrefix   String   @default("yt") // 路径前缀，默认"yt"

  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@index([createdAt])
  @@map("storage_files")
}

// ============================================
// 用户管理
// ============================================

// 用户表
model User {
  id        String   @id @default(cuid())
  username  String   @unique // 用户名（唯一）
  password  String   // 密码（明文存储）

  // 媒体文件关联
  mediaFiles   MediaFile[]
  mediaFolders MediaFolder[]
  mediaTags    MediaTag[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("users")
}

// ============================================
// 媒体文件管理
// ============================================

// 媒体文件类型枚举
enum MediaFileType {
  IMAGE
  VIDEO
  AUDIO
}

// 媒体文件来源枚举
enum MediaFileSource {
  URL
  LOCAL
}

// 媒体文件表
model MediaFile {
  id            String          @id @default(cuid())
  userId        String          // 所属用户ID
  user          User            @relation(fields: [userId], references: [id], onDelete: Cascade)

  // 文件基本信息
  name          String          // 文件名称
  type          MediaFileType   // 类型: IMAGE, VIDEO, AUDIO
  source        MediaFileSource // 来源: URL, LOCAL
  sourceUrl     String?         // 远程URL（如果是URL来源）
  localPath     String?         // 本地文件路径（如果是本地上传）

  // 缩略图/封面
  thumbnailPath String?         // 缩略图本地路径

  // 元数据
  fileSize      Int?            // 文件大小（字节）
  mimeType      String?         // MIME类型
  width         Int?            // 宽度（图片/视频）
  height        Int?            // 高度（图片/视频）
  duration      Float?          // 时长（视频/音频，秒）

  // 组织结构
  folderId      String?
  folder        MediaFolder?    @relation(fields: [folderId], references: [id], onDelete: SetNull)
  tags          MediaTag[]

  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt

  @@index([userId])
  @@index([folderId])
  @@index([type])
  @@index([source])
  @@map("media_files")
}

// 文件夹表（单层）
model MediaFolder {
  id        String      @id @default(cuid())
  userId    String      // 所属用户ID
  user      User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  name      String      // 文件夹名称
  color     String?     // 文件夹颜色（可选）
  icon      String?     // 文件夹图标（可选）
  sortOrder Int         @default(0)

  files     MediaFile[]

  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  @@unique([userId, name])
  @@index([userId])
  @@map("media_folders")
}

// 标签表
model MediaTag {
  id        String      @id @default(cuid())
  userId    String      // 所属用户ID
  user      User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  name      String      // 标签名称
  color     String      @default("#gray") // 标签颜色

  files     MediaFile[]

  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  @@unique([userId, name])
  @@index([userId])
  @@map("media_tags")
}

// ============================================
// 错误监控和告警
// ============================================

// 错误日志级别
enum ErrorLevel {
  WARN
  ERROR
  CRITICAL
}

// 错误日志表
model ErrorLog {
  id           String     @id @default(cuid())
  level        ErrorLevel // 错误级别
  source       String     // 来源 (adapter name, service name)
  message      String     // 错误消息
  stack        String?    // 错误堆栈
  context      String?    // JSON: 请求详情、任务信息

  requestId    String?    // 关联的 GenerationRequest
  taskId       String?    // 供应商任务 ID

  resolved     Boolean    @default(false)
  resolvedAt   DateTime?
  resolvedBy   String?

  createdAt    DateTime   @default(now())

  @@index([level])
  @@index([source])
  @@index([createdAt])
  @@index([resolved])
  @@map("error_logs")
}

// 系统告警类型
enum AlertSeverity {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

// 系统告警表
model SystemAlert {
  id          String        @id @default(cuid())
  type        String        // ERROR_RATE_HIGH, TASK_TIMEOUT, API_DOWN
  severity    AlertSeverity // LOW, MEDIUM, HIGH, CRITICAL
  message     String
  details     String?       // JSON

  sentAt      DateTime?
  channel     String?       // email, webhook, slack

  acknowledged   Boolean   @default(false)
  acknowledgedAt DateTime?
  acknowledgedBy String?

  createdAt   DateTime @default(now())

  @@index([severity])
  @@index([acknowledged])
  @@index([createdAt])
  @@map("system_alerts")
}
